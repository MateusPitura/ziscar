generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id           Int            @id @default(autoincrement())
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
  isActive     Boolean        @default(true)
  organization Organization[]
  user         User[]
  audit        Audit[]
}

model Address {
  id           Int            @id @default(autoincrement())
  cep          String         @db.VarChar(8)
  number       String         @db.VarChar(128)
  street       String?        @db.VarChar(128)
  city         String?        @db.VarChar(128)
  state        String?        @db.VarChar(128)
  neighborhood String?        @db.VarChar(128)
  complement   String?        @db.VarChar(128)
  organization Organization[]
  user         User[]
}

model Organization {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  isActive  Boolean  @default(true)
  cnpj      String   @unique @db.VarChar(14)
  name      String   @db.VarChar(128)
  addressId Int?     @unique
  address   Address? @relation(fields: [addressId], references: [id], onDelete: SetNull)
  clientId  Int
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model User {
  id        Int       @id @default(autoincrement())
  createAt  DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  isActive  Boolean   @default(true)
  fullName  String    @db.VarChar(128)
  email     String    @unique @db.VarChar(128)
  password  String    @db.VarChar(128)
  cpf       String?   @unique @db.VarChar(11)
  birthDate DateTime? @db.Date
  code      String?   @db.VarChar(128)
  cellPhone String?   @db.VarChar(11)
  jit       String?
  addressId Int?      @unique
  address   Address?  @relation(fields: [addressId], references: [id], onDelete: SetNull)
  clientId  Int
  client    Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  roleId    Int
  role      Role      @relation(fields: [roleId], references: [id])
  audit     Audit[]
}

enum Roles {
  ADMIN
  FINANCE
  SALES
}

model Role {
  id          Int          @id @default(autoincrement())
  name        Roles        @unique
  user        User[]
  permissions Permission[]
}

enum Resources {
  USERS
  VEHICLES
  STORES
  VEHICLE_PURCHASE
  VEHICLE_EXPENSE
  VEHICLE_SALE
  ACCOUNTS_PAYABLE
  ACCOUNTS_RECEIVABLE
  CUSTOMERS
}

enum Actions {
  CREATE
  READ
  UPDATE
  DELETE
}

model Permission {
  id       Int       @id @default(autoincrement())
  resource Resources
  action   Actions
  roles    Role[]
}

enum Methods {
  CREATE
  POST
  PATCH
  DELETE
}

model Audit {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  method    Methods
  ipAddress String?  @db.VarChar(128)
  url       String   @db.VarChar(128)
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  clientId  Int?
  client    Client?  @relation(fields: [clientId], references: [id])
}
